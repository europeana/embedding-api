import socket

def socket_listen(socket, answer_callback_function, verbose):
    """
    Listen on the provided socket and send back an answer generated by the callback function.
    If the word 'TERMINATE' is received (on 1 line ending with \n) then the socket will close itself and the program
    will terminate
    :param socket: the socket to use for listening and sending back data
    :param answer_callback_function: a function that accepts string data as input and sends back dictionary data as output
    :param verbose: boolean, if true we print the flow to the console for debugging
    :return received data from the client
    """
    socket.listen(1)  # put the socket into listening mode (1 thread)
    if verbose: print(f"Socket listening on {socket.getsockname()}...")

    conn, addr = socket.accept()  # wait until client established a connection

    data = ""
    with conn:
        if verbose: print(f"Connection from {addr}")
        while True:
            data_part = conn.recv(4096)
            data = data + data_part.decode()
            if data_part.endswith(b'\n'):
                break
        if verbose: print(f"Received data: {data}")

        if (dataString == 'TERMINATE\n'):
            print("Shutting down application")
            #socket.close()  tmp commented out to test killing process
            exit(0)

        # Send back answer message to the client
        response = answer_callback_function(data)
        conn.send(str(response).encode())

        return data


#
# For testing purposes
#
def dummy_callback_function(data):
    response = {}
    response["status"] = "success"
    response["data"] = "Thank you for connecting. This is just a test answer"
    return response

if __name__ == '__main__':
    s = socket.socket()
    s.bind(('127.0.0.1', 12001)) # only allow local connections
    while True:
        data = socket_listen(s, dummy_callback_function, True)

